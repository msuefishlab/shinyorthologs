newtonsMethod(20)
secantMethod(20,21)
# code
g <- 9.8065
k <- 0.00341
target<-function(t){
log(cosh(t*sqrt(g*k)))/k-85
}
firstDerivative<-function(t){
sqrt(g/k)*tanh(t*sqrt(g*k))
}
newton <- function(t) {
ret <- t-(target(t)/firstDerivative(t))
cat(t, '\t', target(t), '\t', target(ret)/(target(t)^2), '\n')
flush.console()
ret
}
secant <- function(t1, t2) {
ret <- t1-(target(t1)*(t1-t2)/(target(t1)-target(t2)))
cat(t1, '\t', target(t1), '\t', target(ret)/(target(t1)), '\n')
flush.console()
ret
}
# Finding the root by Newton method
newtonsMethod<-function(t)
{
while(target(t)!=0){
t <- newton(t)
}
t
}
# Finding the root by Newton method
secantMethod<-function(t1, t2)
{
while(target(t1)!=0){
temp <- t1
t1 <- secant(t1, t2)
t2 <- temp
}
t1
}
t<-seq(-5,5,by=0.1)
plot(t,target(t),type="l")
lines(t,firstDerivative(t))
newtonsMethod(20)
secantMethod(20,21)
# code
g <- 9.8065
k <- 0.00341
target<-function(t){
log(cosh(t*sqrt(g*k)))/k-85
}
firstDerivative<-function(t){
sqrt(g/k)*tanh(t*sqrt(g*k))
}
newton <- function(t) {
ret <- t-(target(t)/firstDerivative(t))
cat(t, '\t', target(t), '\t', (ret-4.36733)/(t-4.36733), '\n')
flush.console()
ret
}
secant <- function(t1, t2) {
ret <- t1-(target(t1)*(t1-t2)/(target(t1)-target(t2)))
cat(t1, '\t', target(t1), '\t', target(ret)/(target(t1)), '\n')
flush.console()
ret
}
# Finding the root by Newton method
newtonsMethod<-function(t)
{
while(target(t)!=0){
t <- newton(t)
}
t
}
# Finding the root by Newton method
secantMethod<-function(t1, t2)
{
while(target(t1)!=0){
temp <- t1
t1 <- secant(t1, t2)
t2 <- temp
}
t1
}
t<-seq(-5,5,by=0.1)
plot(t,target(t),type="l")
lines(t,firstDerivative(t))
newtonsMethod(20)
secantMethod(20,21)
# code
g <- 9.8065
k <- 0.00341
target<-function(t){
log(cosh(t*sqrt(g*k)))/k-85
}
firstDerivative<-function(t){
sqrt(g/k)*tanh(t*sqrt(g*k))
}
newton <- function(t) {
ret <- t-(target(t)/firstDerivative(t))
cat(t, '\t', target(t), '\t', (target(ret))/(target(t)^2), '\n')
flush.console()
ret
}
secant <- function(t1, t2) {
ret <- t1-(target(t1)*(t1-t2)/(target(t1)-target(t2)))
cat(t1, '\t', target(t1), '\t', target(ret)/(target(t1)), '\n')
flush.console()
ret
}
# Finding the root by Newton method
newtonsMethod<-function(t)
{
while(target(t)!=0){
t <- newton(t)
}
t
}
# Finding the root by Newton method
secantMethod<-function(t1, t2)
{
while(target(t1)!=0){
temp <- t1
t1 <- secant(t1, t2)
t2 <- temp
}
t1
}
t<-seq(-5,5,by=0.1)
plot(t,target(t),type="l")
lines(t,firstDerivative(t))
newtonsMethod(20)
secantMethod(20,21)
# code
g <- 9.8065
k <- 0.00341
target<-function(t){
log(cosh(t*sqrt(g*k)))/k-85
}
firstDerivative<-function(t){
sqrt(g/k)*tanh(t*sqrt(g*k))
}
newton <- function(t) {
ret <- t-(target(t)/firstDerivative(t))
cat(t, '\t', target(t), '\t', (target(ret))/(target(t)^2), '\n')
flush.console()
ret
}
secant <- function(t1, t2) {
ret <- t1-(target(t1)*(t1-t2)/(target(t1)-target(t2)))
cat(t1, '\t', target(t1), '\t', target(ret)/(target(t1)), '\n')
flush.console()
ret
}
# Finding the root by Newton method
newtonsMethod<-function(t)
{
while(target(t)!=0){
t <- newton(t)
}
t
}
# Finding the root by Newton method
secantMethod<-function(t1, t2)
{
while(target(t1)!=0){
temp <- t1
t1 <- secant(t1, t2)
t2 <- temp
}
t1
}
t<-seq(-5,5,by=0.1)
plot(t,target(t),type="l")
lines(t,firstDerivative(t))
newtonsMethod(20)
secantMethod(20,21)
# code
g <- 9.8065
k <- 0.00341
target<-function(t){
log(cosh(t*sqrt(g*k)))/k-85
}
firstDerivative<-function(t){
sqrt(g/k)*tanh(t*sqrt(g*k))
}
newton <- function(t) {
ret <- t-(target(t)/firstDerivative(t))
cat(t, '\t', target(t), '\t', (target(ret))/(target(t)^2), '\n')
flush.console()
ret
}
secant <- function(t1, t2) {
ret <- t1-(target(t1)*(t1-t2)/(target(t1)-target(t2)))
cat(t1, '\t', target(t1), '\t', target(ret)/(target(t1)^2), '\n')
flush.console()
ret
}
# Finding the root by Newton method
newtonsMethod<-function(t)
{
while(target(t)!=0){
t <- newton(t)
}
t
}
# Finding the root by Newton method
secantMethod<-function(t1, t2)
{
while(target(t1)!=0){
temp <- t1
t1 <- secant(t1, t2)
t2 <- temp
}
t1
}
t<-seq(-5,5,by=0.1)
plot(t,target(t),type="l")
lines(t,firstDerivative(t))
newtonsMethod(20)
secantMethod(20,21)
source("~/.active.document")
source("~/.active.document")
no.dimnames <- function(a) {
## Remove all dimension names from an array for compact printing.
d <- list()
l <- 0
for(i in dim(a)) {
d[[l <- l + 1]] <- rep("", i)
}
dimnames(a) <- d
a
}
source("~/.active.document")
list.files()
setwd('../Desktop')
list.files()
file<-read.table('shooting.txt')
file
View(file)
file<-read.table('shooting.txt',skip=1)
View(file)
plot(file)
file<-read.table('shooting.txt',skip=1)
plot(file)
getwd()
setwd('../Downloads/')
ls()
load('normdiff.R')
getwd()
setwd('../Desktop/shinyorthologs2')
install.packages('devtools')
library(devtools)
lint()
